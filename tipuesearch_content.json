{"pages":[{"text":"What are merge stories? Merge stories are stories about all kinds of contributions that people have made to free and open source projects . They give details about the process: how people pick issues to work on, the common obstacles they run into, the resources they use to solve problems, and more. We hope that by sharing these stories, we can give newcomers a better sense of what contributing is like. The name \"merge stories\" comes from the version control term meaning \"to combine multiple versions of files\". Most open source contributions made through version control systems finish with a \"merge\". Some open source contributions, like answering questions on mailing lists, promoting a project through social media, or designing a promotional flyer, might not be merged into version control, but they are still metaphorically merged into the project. Stories about these kinds of contributions are absolutely welcome! Who can contribute? Anyone! You do not need to be a coder or a seasoned open source contributor to submit a story. We want to see all kinds of stories represented here, from typo fixes to translation efforts, epic refactorings to organized events. We plan to share this site at workshops for newcomers such as Open Source Comes to Campus , so stories from people who are just beginning in open source are especially welcome. The best stories are those which give a lot of detail, and don't brush over the obstacles you encountered or failures you experienced. Stories about unsuccessful contributions are also encouraged. Everyone, even people who've been contributing for decades, make mistakes sometimes. Why not share yours, so we can all learn from them? Why should I contribute? Writing out the details of how you made a contribution can help you remember the things that you learned and identify ways you can improve. Talking about your process will also help people making similar contributions. And by submitting stories, you can create a record of the work you've done beyond a list of commits. How is it licensed? All stories contributed to MergeStories are licensed CC BY-SA 4.0 . This means that anyone can use them for any purposes, as long as they attribute the original author and share their changes under the same terms. Who made MergeStories? MergeStories was conceived of by Shauna Gordon-McKeon and designed and developed with the help of Asheesh Laroia . It is a project of OpenHatch . Other contributors include: Paul Tagliamonte Amol Bhave Britta Gustafson Thomas Kluyver How can I help? Anyone is welcome to contribute! (Fair warning: we will definitely ask you to write a merge story about your contribution.) The project repository can be found on Github . You can follow the instructions in the README to set up the project locally and look for issues to work on in the issue tracker . Please leave a comment when you start working on an issue, and say hello in our IRC channel , #openhatch on Freenode.","tags":"pages","loc":"http://mergestories.com/content/pages/about.html","title":"About MergeStories"},{"text":"Thank you for sharing your story! Please give us a few days to process your submission - we will let you know when it goes live. We may email you for clarification before posting your story. Please feel free to submit as many stories as you like.","tags":"pages","loc":"http://mergestories.com/content/pages/submitted.html","title":"Thanks for sharing!"},{"text":"One year ago, I received an invitation to AdaCamp San Francisco. In the spirit of open source, I volunteered to help with the room set up and AV preparation on the first morning of the event. I arrived early and received my tools -- a tape measure, a room map, and several rolls of blue painters' tape. I found another AdaCamper who was willing to help me crawl around on the floor and create a blue painters' tape path throughout the meeting rooms. Why? On that day, my contribution was creating an accessible path for others to use and a reminder to all to be respectful of open spaces. Pretty cool to make a contribution that didn't involve lines of code, git, or code reviews. Even cooler to me, the contribution is something that I have been able to share with other groups in my local community. Sharing open knowledge and skills is one of the cornerstones of open source. If you ever wonder if your little contribution to a project or event matters, I believe it does. The beauty of many little contributions, or even one, is that it makes things a little better for others even if only for a moment. The little roll of blue tape might have another use -- it comes in handy for sticking together many small contributions of goodness.","tags":"misc","loc":"http://mergestories.com/s/a-little-blue-tape-goes-a-long-way/","title":"A little blue tape goes a long way"},{"text":"I'm a professor who has students join a humanitarian open source community and make contributions as part of a class. I first became involved in HFOSS (humanitarian free and open source software) in January of 2006. At that time, Trishan de Lanerolle (now a project manager at IBM) came back from Sri Lanka after spending Christmas break there. He and a group of people were working on the Sahana disaster management system to try to help victims of disasters, especiallly victims of the Asian tsunami of 2005. Trishan urged me to get involved with the project, and more importantly, to get students involved with the project. During the spring 2006 semester, Ralph Morellis, Trishan and I got two independent study students to download and install the project. We also asked students to make small changes and compile and run the project. We wanted to see if students could work with it. It turned out that Sahana was easy to install and relatively easy to modify. I have found this a good first step to determine if a project is one that students can participate in. Our next step was to see if we could actually make a contribution to the project. During summer 2006, we had three interns, two paid and an unpaid volunteer from Bard college, work to develop a Volunteer Management module for Sahana. This module was intended to help register the volunteers for a disaster so that volunteers could be allocated to the proper locations. For instance, to send someone with construction background to help shore up dams. The module was selected because at the time the registration was very rudimentary. They wanted something that kept track of more than just names and would handle things like occupation. One difficulty that students faced was that during the course of development, the database had to be changed to accommodate the new information. This took some going back and forth with the Sahana team to get a design that was acceptable. By the end of the summer, they had developed a Volunteer Management module that was so impressive, the Sahana Foundation flew one student across the country to demo it during the Strong Angel III disaster and pandemic simulation held in San Francisco. Strong Angel III brought together technology companies, medical and military personnel, and humanitarian organizations to simulate a response to a disaster and pandemic in order to see how to improve such a response. The Volunteer Management module was used to register the participants of Strong Angel III. I have pictures of the student speaking with the Worldwide Manager of the IBM Crisis Team and working with a Microsoft Soluion Architect, also one of the designers of SSE. We had only been working with Sahana for 7-8 months and I was blown away by what students had accomplished and also by the potential offered by open source involvement. Some of the lessons that I learned from that experience (which have been reinforced by involvement with a range of projects) are: Students can make meaningful contributions to open source projects The potential to learn is vast and goes far beyond classroom learning Working with open source gives students experience in developing within a professional environment, learning professional conduct Open source allows students to understand the intricacies of working with a large, complex application.","tags":"misc","loc":"http://mergestories.com/s/helping-others-contribute-to-sahana/","title":"Helping others contribute to Sahana"},{"text":"Copy. Paste. The things you do every day are the most annoying things when they break. And it was broken - when my program tried to get text from the clipboard, special characters like \u20ac came back messed up. It's 2012, surely by now computers should let me use whatever characters I like!? I was using the clipboard functions in tkinter, Python's wrapper around the Tk system. So which bit is the bug in? I don't know, but I'll start with Python, because I understand that better than Tk. I file a bug, explaining exactly what I'm seeing, and what I want to happen. In minutes, another Linux user comments to say that they see the problem too, but in a slightly different way. But then someone running Windows says it works fine for them - the bug is platform dependent. I get sidetracked for a while when I test on my work computer, and find that I still get the wrong thing, but not the same wrong thing I got at home. They're running the same version of Ubuntu, why are they doing different things? Light dawns: it's not the computers, the bug depends on what program I copied from. If we can fix this, we'll need to make sure the fix works whatever program you copy from. The first commenter soon identifies an option called UTF8_STRING which consistently gets us the right answer. So why isn't that the default? Operating systems again: that option is mainly useful on Linux, and it may not work at all on other platforms. I'm ready to prepare a patch. This is the first time I've contributed code to Python, but the developer guide walks me through the steps. I download the source code for Python, compile it, and run the tests. OK. I make my changes, run the tests again to check that I didn't break anything, save the patch file, and attach it to my issue. It's a simple change: the code finds out what platform it's running on, and then uses UTF8_STRING as the default if it's safe to do so. The commenters on the issue review my changes. It's a bit too simple, and I add some more code. Someone asks for unit tests, but it's agreed that there's no easy way to test this code, so I'm let off writing those. I make two more versions of the patch, then someone else makes a small change and uploads a fourth version, which is ready to land. Since I'm a new contributor, I have to sign a contributor agreement. This is really unusual for open source projects. Normally there are no formailities about contributing, but Python is a big and serious enough project that there's a bit of paperwork. I print out the form, sign it, and email a photo of it to the Python Software Foundation. After a day or so, it's confirmed, and my patch lands. I'm a contributor to Python! It feels good. I've made a few more small contributions to Python since then. It's easier now that I'm familiar with the procedure, though I've gone back to the developer guide each time. For such a famous piece of software, it's surprisingly easy to get changes accepted.","tags":"misc","loc":"http://mergestories.com/s/fixing-a-bug-in-python/","title":"Fixing a bug in Python"},{"text":"I got lucky with getting involved in OpenHatch - I met cool people at conferences, they worked on a project that I found interesting, and they invited me to help with it! (Here's that story in more detail. So I started hanging out on OpenHatch's IRC channel and mailing lists, generally learning about the project, getting to know its people, and finding out where I could help with its goals (helping people contribute to free and open source projects). I'm a community manager instead of a developer, so often the things I can help with aren't listed in a bug tracker. One of these ways of helping happened a few months later. I realized that OpenHatch-the-organization did a lot more than what the OpenHatch website homepage described -- and that the homepage was unintentionally outdated, instead of being purposefully designed to focus on only a few things. So at an in-person project sprint soon after that, I decided that my task for the day would be to work on this problem! To propose some changes, I wrote emails to the development mailing list: \"Let's link important things from the homepage\" \"Let's also put more social media on the homepage\" Then at the sprint, I talked about these ideas with a long-time contributor to get confirmation that these were good ideas, and I started making a simple mockup of how the additional information could fit into the page. It was nice to do this kind of design work at an in-person sprint because I knew I could get immediate focused feedback from other contributors, instead of risking veering off into paths that other contributors wouldn't support. It's also much easier to talk about design when you can point at a screen together. I worked on my mockup more in the next couple weeks, and then at one of our regular IRC \"office hours\" meetings, I discussed the revised mockup with other contributors, and we refined the design together. We wrote to the mailing list about this mockup in case any other contributors were interested in providing feedback. Nobody objected, so I filed a formal task in our bug tracker with a technical description of the changes to be made. Yay! I assigned the task to a fellow contributor who had expressed interest in implementing it. A few days later, she filed a pull request with her changes , including a screenshot of her results. I gave her some feedback about the changes to explain how to make them more closely aligned with the mockup, and she updated the pull request until we both agreed that it looked good. Another contributor merged the pull request, and a little later the change went live! Before and after . This was fun. Sticking around with one project for a while meant that I had enough understanding of the project to identify a significant issue and lead our effort to fix that issue. Relevant links: Issue filed Collaborator's pull request Mailing list post 1 , post 2 , post 3","tags":"misc","loc":"http://mergestories.com/s/improving-a-project-homepage/","title":"Improving a project homepage"},{"text":"When I graduated from university, I worked for a web consulting shop called Evolving Web that used Drupal . They cared a lot about contributing to open source, and were delightful enough to send me to DrupalCon Denver in 2012. DrupalCon was really fun! As with many open source conferences, there were sprints at the end, and I decided that I wanted to contribute to Drupal during the sprints. My employer was into it. Awesome plan. At the sprints, I met someone who was working on a new configuration management system for Drupal. If you're not familiar with Drupal, configuration management at that point was a HUGE PAIN. All the configuration was in the database (!!), so it was impossible to version. This sucked, a lot. He was asking people to help convert Drupal systems to the new configuration management system. I thought this sounded SUPER AWESOME. So here I'm at an awesome open source conference with a community which is super welcoming to beginners working on a component that I'm personally interested in improving (configuration management) and there are people who can help me contribute in real life. WHAT COULD BE BETTER? So I go to the sprints! The people are super friendly. I decide to work on converting search settings. Here's the issue! I spend what feels like all day working on a patch, making a bunch of replacements like $count = variable_get('search_embedded_form_submitted', 0); $count = config('search.settings')->get('embedded_form_submitted'); which convert from the old settings API to the new one. (spoiler: that particular change actually made it into the final commit!) This seems promising! But then EVERYTHING GOES WRONG. The main thing that is wrong is that the unit test runner takes about 20 minutes to run tests, and some people say that I shouldn't totally rely on its results. So I can't tell if the problem is with my code or the testbot, and I mostly spend the whole day being frustrated with the testbot. (you can see my attempts! I'm jvns in the issue tracker) The issue also turned to be a bit more complicated than I originally thought -- there were some subtleties with the search settings that made this not totally trivial. So I don't manage to get the tests to pass. I go home and cry because I was expecting it to be fun and to maybe get my patch merged and instead it was so frustrating and my patch totally didn't work. =) 5 months, 50 comments, and many more commits later, some later version of the patch finally gets merged. This isn't in any way an indictment of the Drupal community -- they're so helpful and wonderful, and really committed to helping new contributors get started. But getting started contributing to open source can be really hard and frustrating, sometimes just for technical reasons like a test bot is overwhelmed at a sprint. Relevant links: Issue","tags":"misc","loc":"http://mergestories.com/s/how-the-test-bot-made-me-cry/","title":"Open source is hard! (or, how the test bot made me cry)"},{"text":"I found SciPy when searching for projects that were both in the domain of scientific research and statistical analysis, and written in the python programming language. (SciPy refers to both the scientific computing library I contributed to, as well as the general open source package which also includes projects like iPython and Matplotlib.) I felt a bit intimidated at first, because I'm not an expert in statistics or python, so I decided to start with one of the issues labeled easy_fix . I browsed through many of the issues before finding one that I thought I had a prayer of being able to handle. The issue I picked dealt with the following problem. Probabilities must be between 0 and 1. The limit of zero means \"no chance of happening\" while the limit of 1 means \"will always happen\". A probability of greater than 1 therefore makes no sense. However, due to unavoidable rounding errors , occasionally probabilities were being produced that were greater than 1. The person who reported the issue, a maintainer, suggested that the numpy function clip be used to deal with this problem. My first step was to figure out where to make this change. The person who reported the issue had asked to change the probabilities titled \"cdf, sf, pmf\". I did a search for each of these using Github's search-repository interface. There were many results, but only one file where the functions were defined ( this one ), so that seemed like a good place to start. Rather than go too far down the wrong path, I left a quick comment asking for confirmation and got a helpful reply. With the help of the numpy documentation for the suggested function, clip, I was able to implement this change fairly easily, but I wasn't done yet! The maintainer asked me to time the function before and after my changes. They didn't want to accept the change if it slowed things down too much. I'd never timed anything before, and at their suggestion explored the Timeit python library . I found this to be an interesting and useful tool to learn about. Harder was choosing some \"normal\" and \"slow\" test functions -- I am not familiar enough with statistics to have an intuition of which distributions are easy to calculate and which are hard to calculate. I searched through the documentation and issues for references to \"slow\" distributions until I was able to find one. I commented with the results from Timeit, only to discover that more challenges lay ahead! First, the maintainer asked me to implement a unit test. This is a very reasonable request, but I don't have a formal programming background and I'd never worked with unit tests before. I was able to muddle through with the help of the maintainer, but I wish I'd had resources like Ned Bachtelder's talk on unit testing at PyCon 2014 to consult! The maintainer also advised me to develop on a separate branch from master and to use the SciPy standard acronyms when making commit messages. Luckily I was already familiar with branching in git and amending commits and pull requests, and was able to make these changes fairly easily. (To refresh, though, I used this great branching tutorial .) Unfortunately, when I added my tests, things did not work perfectly - my changes induced no less than 8 failures. It turned out that one of the distributions affected by the change was incompatible with it, and I had to remove the clipping function from more than half of the places I'd added it. Another issue was with how I'd written the test, which was by building it into a pre-existing test. This didn't make much sense - with unit tests, I now know it's good practice to test each behavior separately - and at the maintainer's suggestion, I split it off into a new test. At this point, we were finally finished. I learned a ton from making this contribution, thanks in large part due to the extensive help from Evgeni Burovski, the maintainer I was working with. I highly recommend contributing to SciPy, and hope to do so again soon! Relevant Links: Patch","tags":"misc","loc":"http://mergestories.com/s/clipping-in-scipy/","title":"Clipping functions in SciPy"},{"text":"I started off as a user of Iron Blogger , which is both a piece of software and a social group. Individuals agree to write a blog post every week or pay $5; when enough money is collected, the group meets for pizza and beer. The Iron Blogger software, which is built off of the Planet feed aggregator , provides a feed of all the blog posts written by participants combined. I enjoyed reading this feed but was annoyed that it only showed the most recent 15 posts. I decided to change Iron Blogger to show more. I was new to FOSS at the time and didn't really know where to begin. Luckily I was friends with the maintainer of the project and he was able to point me to where the source code was stored (it has since moved). After several hours of poking around the repository, looking through Planet's documentation, and emailing both my friend and the Planet mailing list, I was able to identify the variable to change. I'm afraid I don't remember the details of the obstacles I faced, as this was several years ago now. I do remember telling my friend, \"Okay, I found the variable! You just need to go to line 37 in the configuration file and change itemsperpage from 15 to, say, 50...\" He told me to submit a patch. He explained what a patch was and gave me a link to a tutorial that looked something like this . I was then able to generate a patch, which he merged into the project. A few years later, the project was put on Github, so you can see the commit (linked below). This was a great first contribution to make, because it was something I cared about but also something very straightforward to fix with my programming background (which is not very extensive, but did cover variables and configuration files). I was also lucky to have someone willing to walk me through the basics of downloading repositories and creating patches. Relevant Links: Patch","tags":"misc","loc":"http://mergestories.com/s/first-FOSS-contribution-to-iron-blogger/","title":"My first FOSS contribution to Iron Blogger"},{"text":"I've been using GIMP for years, but I've never contributed to it. Recently, some GIMP contributors contacted me about arranging an online event to help them improve their documentation. I wanted to see how their documentation currently looked, so I went to their website and started clicking and reading links. When I got to the link for their installation guide , it sent me to a blank page. I wanted to confirm that it wasn't just a problem with my browser, so I opened up the page in both Firefox and Chrome. Then I asked some friends (the kinds folks on the #openhatch IRC channel) what they saw at the link, and they also saw nothing. Before I could proceed with the next step, one of them dug up the correct link for me! I decided to file a bug so that someone else could make this presumably easy fix. To file the bug, I found the project's bug tracker, and within that, the tracker for the GIMP website. I checked the list of bugs to see if anyone had already reported this problem. They hadn't, so I wrote up a quick report. Relevant Links: bug report","tags":"misc","loc":"http://mergestories.com/s/small-bug-in-gimp/","title":"Filing a small bug with GIMP"},{"text":"I discovered, through reading the Debian wiki, that there was a new web app created for Debian called Debexpo, and it was nearly ready to replace our existing package review tool, but not quite ready. I took it upon myself to: Email the original authors of the code Talk to prospective users on IRC Work on it a lot at the yearly Debian conference in 2011 -- I already planned on going, and instead of just socializing, I used the Debconf hack lab space to work on this. Transition it to a different community that now maintains it -- I did this by intentionally making contribution really easy, and then repeatedly asking for help on the debian-mentors email list. All in all, I had a fun time. It is always a pleasure to help Debian. I learned a lot about the Pylons web framework as a result, which I mostly learned through massive Googling. Relevant links: Project website","tags":"misc","loc":"http://mergestories.com/s/reviving-debexpo/","title":"Reviving debexpo"}]}